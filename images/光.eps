%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 3.2%%AI8_CreatorVersion: 9.0%%For: (9600 ) ()%%Title: (\245\3722-155-17.AI)%%CreationDate: 6/28/2004 2:24 PM%%BoundingBox: 144 323 428 543%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0%%+ procset Adobe_cshow 1.1 0%%+ procset Adobe_customcolor 1.0 0%%+ procset Adobe_pattern_AI3 1.0 0%%+ procset Adobe_Illustrator_AI3 1.0 1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887%AI3_TileBox: 17.5 21.3896 577.5 818.3896%AI3_DocumentPreview: Macintosh_ColorPic%%PageOrigin:17.5 21.3896%%AI3_PaperRect:-17 819 578 -23%%AI3_Margin:17 -22 -18 23%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_packedarray 2.0 0%%Title: (Packed Array Operators)%%Version: 2.0 0%%CreationDate: (8/2/90) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_packedarray 5 dict dup begin put/initialize{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end	} ifelse} def/terminate{} def/packedarray{array astore readonly} def/setpacking{pop} def/currentpacking{false} defcurrentdict readonly pop end%%EndResourceAdobe_packedarray /initialize get exec%%BeginResource: procset Adobe_cshow 1.1 0%%Title: (cshow Operator)%%Version: 1.1 0%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall end end	} ifelse} def/terminate{} def/cshow{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_customcolor 1.0 0%%Title: (Custom Color Operators)%%Version: 1.0 0%%CreationDate: (5/9/88) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall end	Adobe_customcolor begin	} ifelse} def/terminate{currentdict Adobe_customcolor eq	{ end	} if} def/findcmykcustomcolor{5 packedarray}  def/setcustomcolor{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint{pop} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI3 1.1 0%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (7/21/89) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_pattern_AI3 16 dict dup begin put/initialize{/definepattern where	{	pop	}	{	Adobe_pattern_AI3 begin	Adobe_pattern_AI3		{		dup xcheck			{			bind			} if		pop pop		} forall	mark	cachestatus 7 1 roll pop pop pop pop exch pop exch		{		{		10000 add		dup 2 index gt			{			exit			} if		dup setcachelimit		} loop		} stopped	cleartomark	} ifelse} def/terminate{currentdict Adobe_pattern_AI3 eq	{ end	} if} deferrordict/nocurrentpoint{popstop} puterrordict/invalidaccess{popstop} put/patternencoding256 array def0 1 255{patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{17 dict begin/uniform exch def/cache exch def/key exch def/procarray exch def/mtx exch matrix invertmatrix def/height exch def/width exch def/ctm matrix currentmatrix def/ptm matrix def/str 32 string def/slice 9 dict defslice /s 1 putslice /q 256 procarray length div sqrt floor cvi putslice /b 0 put/FontBBox [0 0 0 0] def/FontMatrix mtx matrix copy def/Encoding patternencoding def/FontType 3 def/BuildChar	{	exch begin	/setstrokeadjust where {pop true setstrokeadjust} if	slice begin	dup q dup mul mod s idiv /i exch def	dup q dup mul mod s mod /j exch def	q dup mul idiv procarray exch get	/xl j width s div mul def	/xg j 1 add width s div mul def	/yl i height s div mul def	/yg i 1 add height s div mul def	uniform		{		1 1		}		{		width 0 dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		0 height dtransform		dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse	width 0 cache		{		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul		setcachedevice		}		{		setcharwidth		} ifelse	gsave	scale	newpath	xl yl moveto	xg yl lineto	xg yg lineto	xl yg lineto	closepath	clip	newpath end end	exec	grestore	} defkey currentdict definefontend} def/patterncachesize{gsavenewpath0 0 movetowidth 0 linetowidth height lineto0 height linetoclosepathpatternmatrix setmatrixpathbboxexch ceiling 4 -1 roll floor sub 3 1 rollceiling exch floor submul 1 addgrestore} def/patterncachelimit{cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{exch dup begin setfontctm setmatrixconcatslice exch /b exch slice /q get dup mul mul putFontMatrix concatuniform	{	width 0 dtransform round width div exch round width div exch	0 height dtransform round height div exch height div exch	0 0 transform round exch round exch	ptm astore setmatrix	}	{	ptm currentmatrix pop	} ifelse{currentpoint} stopped not	{	2 npop	pathbbox	true	4 index 3 index eq	4 index 3 index eq	and		{		pop false			{			{2 npop}			{3 npop true}			{7 npop true}			{pop true}			pathforall			} stopped			{			5 npop true			} if		} if		{		height div ceiling height mul 4 1 roll		width div ceiling width mul 4 1 roll		height div floor height mul 4 1 roll		width div floor width mul 4 1 roll		2 index sub height div ceiling cvi exch		3 index sub width div ceiling cvi exch		4 2 roll moveto		FontMatrix mtx invertmatrix		dup dup 4 get exch 5 get rmoveto		ptm ptm concatmatrix pop		slice /s		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi		dup slice /q get gt			{			pop slice /q get			} if		put		0 1 slice /s get dup mul 1 sub			{			slice /b get add			gsave			0 1 str length 1 sub				{				str exch 2 index put				} for			pop			dup				{				gsave				ptm setmatrix				1 index str length idiv {str show} repeat				1 index str length mod str exch 0 exch getinterval show				grestore				0 height rmoveto				} repeat			grestore			} for		2 npop		}		{		4 npop		} ifelse	} ifend} def/patternclip{clip} def/patternstrokepath{strokepath} def/patternmatrixmatrix def/patternfill{dup type /dicttype eq	{	Adobe_pattern_AI3 /patternmatrix get	} ifgsavepatternclipAdobe_pattern_AI3 /patternpath get execgrestorenewpath} def/patternstroke{dup type /dicttype eq	{	Adobe_pattern_AI3 /patternmatrix get	} ifgsavepatternstrokepathtrue	{		{			{			newpath 			moveto			}			{			lineto			}			{			curveto			}			{			closepath			3 copy			Adobe_pattern_AI3 /patternfill get exec			} pathforall		3 npop		} stopped			{			5 npop			patternclip			Adobe_pattern_AI3 /patternfill get exec			} if	}	{	patternclip	Adobe_pattern_AI3 /patternfill get exec	} ifelsegrestorenewpath} def/patternashow{3 index type /dicttype eq	{	Adobe_pattern_AI3 /patternmatrix get 4 1 roll	} if	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath currentpoint	6 index 6 index 6 index	Adobe_pattern_AI3 /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshow5 npop} def/patternawidthshow{6 index type /dicttype eq	{	Adobe_pattern_AI3 /patternmatrix get 7 1 roll	} if	{	2 npop (0) exch	2 copy 0 exch put 	gsave	_sp eq {5 index 5 index rmoveto} if	false charpath currentpoint	9 index 9 index 9 index	Adobe_pattern_AI3 /patternfill get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshow8 npop} def/patternashowstroke{4 index type /dicttype eq	{	patternmatrix /patternmatrix get 5 1 roll	} if4 1 roll	{	2 npop (0) exch	2 copy 0 exch put pop	gsave	false charpath	currentpoint	4 index setmatrix	7 index 7 index 7 index	Adobe_pattern_AI3 /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshow6 npop} def/patternawidthshowstroke{7 index type /dicttype eq	{	patternmatrix /patternmatrix get 8 1 roll	} if7 1 roll	{	2 npop (0) exch	2 copy 0 exch put	gsave	_sp eq {5 index 5 index rmoveto} if	false charpath currentpoint	7 index setmatrix	10 index 10 index 10 index	Adobe_pattern_AI3 /patternstroke get exec	grestore	newpath moveto	2 copy rmoveto	} exch cshow9 npop} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI3 71 dict dup begin put/initialize{userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_pjsf {} def/_pjss {} def/_pola 0 def/_doClip 0 def/cf	currentflat def/_tm matrix def/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def /_renderEnd [null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading [0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx {} def/Tj {} def/CRender {} def/_AI3_savepage {} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null defAdobe_Illustrator_AI3 beginAdobe_Illustrator_AI3 dup /nc get begin	{	dup xcheck		{		bind		} if	pop pop	} forallendendendAdobe_Illustrator_AI3 beginAdobe_Illustrator_AI3_vars beginnewpath} def/terminate{endend} def/_null def/ddef{Adobe_Illustrator_AI3_vars 3 1 roll put} def/xput{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop{	{	pop	} repeat} def/sw{dup length exch stringwidthexch 5 -1 roll 3 index mul add4 1 roll 3 1 roll mul add} def/swj{dup 4 1 rolldup length exch stringwidth exch 5 -1 roll 3 index mul add4 1 roll 3 1 roll mul add 6 2 roll /_cnt 0 ddef{1 index eq {/_cnt _cnt 1 add ddef} if} forall popexch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{4 1 roll	{	2 npop 	(0) exch 2 copy 0 exch put pop	gsave	false charpath currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/jss{4 1 roll	{	2 npop 	(0) exch 2 copy 0 exch put 	gsave	_sp eq 		{		exch 6 index 6 index 6 index 5 -1 roll widthshow  		currentpoint		}		{		false charpath currentpoint		4 index setmatrix stroke		}ifelse	grestore	moveto	2 copy rmoveto	} exch cshow6 npop} def/sp{	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/jsp{	{	2 npop 	(0) exch 2 copy 0 exch put 	_sp eq 		{		exch 5 index 5 index 5 index 5 -1 roll widthshow  		}		{		false charpath		}ifelse	2 copy rmoveto	} exch cshow5 npop} def/pl{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where	{	pop true setstrokeadjust	/c	{	curveto	} def	/C	/c load def	/v	{	currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{	2 copy curveto	} def	/Y	/y load def	/l	{	lineto	} def	/L	/l load def	/m	{	moveto	} def	}	{	/c	{	pl curveto	} def	/C	/c load def	/v	{	currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{	pl 2 copy curveto	} def	/Y	/y load def	/l	{	pl lineto	} def	/L	/l load def	/m	{	pl moveto	} def	} ifelse/d{setdash} def/cf	{} def/i{dup 0 eq	{	pop cf	} ifsetflat} def/j{setlinejoin} def/J{setlinecap} def/M{setmiterlimit} def/w{setlinewidth} def/H{} def/h{closepath} def/N{_pola 0 eq 	{	_doClip 1 eq {clip /_doClip 0 ddef} if 	newpath	} 	{	/CRender {N} ddef	}ifelse} def/n{N} def/F{_pola 0 eq 	{	_doClip 1 eq 		{		gsave _pf grestore clip newpath /_lp /none ddef _fc 		/_doClip 0 ddef		}		{		_pf		}ifelse	} 	{	/CRender {F} ddef	}ifelse} def/f{closepathF} def/S{_pola 0 eq 	{	_doClip 1 eq 		{		gsave _ps grestore clip newpath /_lp /none ddef _sc 		/_doClip 0 ddef		}		{		_ps		}ifelse	} 	{	/CRender {S} ddef	}ifelse} def/s{closepathS} def/B{_pola 0 eq 	{	_doClip 1 eq	gsave F grestore 		{		gsave S grestore clip newpath /_lp /none ddef _sc		/_doClip 0 ddef		} 		{		S		}ifelse	}	{	/CRender {B} ddef	}ifelse} def/b{closepathB} def/W{/_doClip 1 ddef} def/*{count 0 ne 	{	dup type (stringtype) eq {pop} if	} if _pola 0 eq {newpath} if} def/u{} def/U{} def/q{_pola 0 eq {gsave} if} def/Q{_pola 0 eq {grestore} if} def/*u{_pola 1 add /_pola exch ddef} def/*U{_pola 1 sub /_pola exch ddef _pola 0 eq {CRender} if} def/D{pop} def/*w{} def/*W{} def/`{/_i save ddef6 1 roll 4 npopconcat popuserdict begin/showpage {} def0 setgray0 setlinecap1 setlinewidth0 setlinejoin10 setmiterlimit[] 0 setdash/setstrokeadjust where {pop false setstrokeadjust} ifnewpath0 setgrayfalse setoverprint} def/~{end_i restore} def/@{} def/&{} def/O{0 ne/_of exch ddef/_lp /none ddef} def/R{0 ne/_os exch ddef/_lp /none ddef} def/g{/_gf exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcashow} ddef/_pjsf{_fcawidthshow} ddef/_lp /none ddef} def/G{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_pjss{_scjss} ddef/_lp /none ddef} def/k{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcashow} ddef/_pjsf{_fcawidthshow} ddef/_lp /none ddef} def/K{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_pjss{_scjss} ddef/_lp /none ddef} def/x{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{_lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcashow} ddef/_pjsf{_fcawidthshow} ddef/_lp /none ddef} def/X{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_pjss{_scjss} ddef/_lp /none ddef} def/dp{dup null eq{pop_dp 0 ne	{	0 1 _dp 1 sub _dl mod		{		_da exch get 3 get		} for	_dp 1 sub _dl mod 1 add packedarray	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll	definepattern pop	} if}{_dp 0 ne _dp _dl mod 0 eq and	{	null dp	} if7 packedarray _da exch _dp _dl mod exch put_dp _dl mod _da 0 get 4 get 2 packedarray/_dp _dp 1 add def} ifelse} def/E{_ed begindup 0 get type /arraytype ne	{	0		{		dup 1 add index type /arraytype eq			{			1 add			}			{			exit			} ifelse		} loop	array astore	} if/_dd exch def/_ury exch def/_urx exch def/_lly exch def/_llx exch def/_n exch def/_y 0 def/_dl 4 def/_dp 0 def/_da _dl array def0 1 _dd length 1 sub	{	/_d exch _dd exch get def	0 2 _d length 2 sub		{		/_x exch def		/_c _d _x get _ ne def		/_r _d _x 1 add get cvlit def		_r _ ne			{			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 				[				/save cvx				_llx neg _lly neg /translate cvx				_c					{					nc /begin cvx					} if				_r dup type /stringtype eq					{					cvx					}					{					{exec} /forall cvx					} ifelse				_c					{					/end cvx					} if				/restore cvx				] cvx			/_fn 12 _n length add string def			_y _fn cvs pop			/_y _y 1 add def			_fn 12 _n putinterval			_fn _c false dp			_d exch _x 1 add exch put			} if		} for	} fornull dp_n _dd /_pdend xput} def/fc{_fm dup concatmatrix pop} def/p{/_fm exch ddef9 -2 roll _pm translate fc7 -2 roll _pm scale fc5 -1 roll _pm rotate fc4 -2 roll exch 0 ne	{	dup _pm rotate fc	1 -1 _pm scale fc	neg _pm rotate fc	}	{	pop	} ifelsedup _pm rotate fcexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore fcneg _pm rotate fc_pd exch get /_fdd exch ddef/_pf{save/_doClip 0 ddef0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			patternfill			}			{			pop			fill			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_psf{save/_doClip 0 ddef0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			9 copy 6 npop patternashow			}			{			pop			6 copy 3 npop ashow			} ifelse		grestore		pop		} for	pop	} forrestore%3 npop newpathsw rmoveto} ddef/_pjsf{save/_doClip 0 ddef0 1 _fdd length 1 sub	{	/_fd exch _fdd exch get ddef	_fd	0 2 _fd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _fc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _fm			12 copy 6 npop patternawidthshow			}			{			pop 9 copy 3 npop awidthshow			} ifelse		grestore		pop		} for	pop	} forrestoreswj rmoveto} ddef/_lp /none ddef} def/sc{_sm dup concatmatrix pop} def/P{/_sm exch ddef9 -2 roll _pm translate sc7 -2 roll _pm scale sc5 -1 roll _pm rotate sc4 -2 roll exch 0 ne	{	dup _pm rotate sc	1 -1 _pm scale sc	neg _pm rotate sc	}	{	pop	} ifelsedup _pm rotate scexch dup sin exch cos div 1 0 0 1 0 6 2 roll_pm astore scneg _pm rotate sc_pd exch get /_sdd exch ddef/_ps{save/_doClip 0 ddef0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			patternstroke			}			{			pop stroke			} ifelse		grestore		pop		} for	pop	} forrestorenewpath} ddef/_pss{save/_doClip 0 ddef0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			10 copy 6 npop patternashowstroke			}			{			pop 7 copy 3 npop ss			} ifelse		grestore		pop		} for	pop	} forrestorepop sw rmoveto} ddef/_pjss{save/_doClip 0 ddef0 1 _sdd length 1 sub	{	/_sd exch _sdd exch get ddef	_sd	0 2 _sd length 2 sub		{		gsave		2 copy get dup _ ne			{			cvx exec _sc			}			{			pop			} ifelse		2 copy 1 add get dup _ ne			{			aload pop findfont _sm			13 copy 6 npop patternawidthshowstroke			}			{			pop 10 copy 3 npop jss			} ifelse		grestore		pop		} for	pop	} forrestorepop swj rmoveto} ddef/_lp /none ddef} def/A{pop} def/nc 3 dict defnc begin/setgray{pop} bind def/setcmykcolor{4 npop} bind def/setcustomcolor{2 npop} bind defcurrentdict readonly pop endcurrentdict readonly pop endsetpacking/annotatepage{} def%%EndResource%%EndProlog%%BeginSetupAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_pattern_AI3 /initialize get execAdobe_Illustrator_AI3 /initialize get exec%AI3_BeginPattern: (Brick)(Brick) 0 0 72 72 [%AI3_Tile(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 0 m0 72 L72 72 L72 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 68.4097 m72 68.4097 lS0 61.209 m72 61.209 LS0 54.0088 m72 54.0088 LS0 46.8076 m72 46.8076 LS0 39.6084 m72 39.6084 LS0 32.4072 m72 32.4072 LS0 25.207 m72 25.207 LS0 18.0059 m72 18.0059 LS0 10.8057 m72 10.8057 LS0 3.6064 m72 3.6064 LS68.4102 68.4097 m68.4102 61.2217 lS54.0098 68.4097 m54.0098 61.2217 LS39.6094 68.4097 m39.6094 61.2217 LS25.21 68.4097 m25.21 61.2217 LS10.8105 68.4097 m10.8105 61.2217 LS68.4102 53.9717 m68.4102 46.7842 lS54.0098 53.9717 m54.0098 46.7842 LS39.6094 53.9717 m39.6094 46.7842 LS25.21 53.9717 m25.21 46.7842 LS10.8105 53.9717 m10.8105 46.7842 LS68.4102 39.5967 m68.4102 32.4092 lS54.0098 39.5967 m54.0098 32.4092 LS39.6094 39.5967 m39.6094 32.4092 LS25.21 39.5967 m25.21 32.4092 LS10.8105 39.5967 m10.8105 32.4092 LS68.4102 25.2217 m68.4102 18.0342 lS54.0098 25.2217 m54.0098 18.0342 LS39.6094 25.2217 m39.6094 18.0342 LS25.21 25.2217 m25.21 18.0342 LS10.8105 25.2217 m10.8105 18.0342 LS68.4102 10.7842 m68.4102 3.5967 lS54.0098 10.7842 m54.0098 3.5967 LS39.6094 10.7842 m39.6094 3.5967 LS25.21 10.7842 m25.21 3.5967 LS10.8105 10.7842 m10.8105 3.5967 LS61.1973 3.5967 m61.1973 0 LS46.7969 3.5967 m46.7969 0 LS32.3965 3.5967 m32.3965 0 LS17.9971 3.5967 m17.9971 0 LS3.5967 3.5967 m3.5967 0 lS61.1973 18.0342 m61.1973 10.8467 LS46.7969 18.0342 m46.7969 10.8467 LS32.3965 18.0342 m32.3965 10.8467 LS17.9971 18.0342 m17.9971 10.8467 LS3.5967 18.0342 m3.5967 10.8467 lS61.1973 32.4092 m61.1973 25.2217 LS46.7969 32.4092 m46.7969 25.2217 LS17.9971 32.4092 m17.9971 25.2217 LS3.5967 32.4092 m3.5967 25.2217 lS61.1973 46.7842 m61.1973 39.5967 LS46.7969 46.7842 m46.7969 39.5967 LS32.3965 46.7842 m32.3965 39.5967 LS17.9971 46.7842 m17.9971 39.5967 LS3.5967 46.7842 m3.5967 39.5967 lS61.1973 61.2217 m61.1973 54.0347 LS46.7969 61.2217 m46.7969 54.0347 LS32.3965 61.2217 m32.3965 54.0347 LS17.9971 61.2217 m17.9971 54.0347 LS3.5967 61.2217 m3.5967 54.0347 lS61.1973 71.959 m61.1973 68.4717 LS46.7969 71.959 m46.7969 68.4717 LS32.3965 71.959 m32.3965 68.4717 LS17.9971 71.959 m17.9971 68.4717 LS3.5967 71.959 m3.5967 68.4717 lS32.3965 32.4092 m32.3965 25.2217 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d4.85 3.617 m4.85 75.617 L76.85 75.617 L76.85 3.617 L4.85 3.617 Lf%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Leaves - Fall )(Leaves - Fall ) 0 0 64.0781 78.9336 [%AI3_Tile(0 O 0 R 0.05 0.2 1 0 k 0.05 0.2 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d64.0781 78.9336 m64.0781 0 L0 0 L0 78.9336 L64.0781 78.9336 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.83 0 1 0 k 0.83 0 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d29.7578 0.9902 m30.4346 1.1914 30.7246 1.3428 V29.2559 4.0547 33.707 8.3359 34.627 9.0762 C35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 Cf13.8525 29.9844 m13.3281 29.5127 13.1309 29.25 V15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C7.2256 14.5 9.2598 15.6133 10.166 15.5645 C10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C8.1875 11.041 9.207 9.5107 10.166 7.0947 C10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C15.373 24.3779 15.373 27.2959 13.8525 29.9844 Cf41.2324 26.0742 m41.5518 26.7021 41.7549 26.959 V44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C46.3408 31.123 45.4395 33.084 44.2402 34.126 C45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C49.749 24.9766 50.584 26.9941 50.25 28.4609 C45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 Cf27.7578 38.7324 m28.4346 38.9316 28.7246 39.084 V27.2559 41.7969 31.707 46.0776 32.627 46.8169 C33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C38.002 44.582 37.3359 46.0547 36.5742 47.5039 C37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C30.7373 55.5146 30.166 54.314 29.2969 53.0366 C30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C30.9775 50.46 29.2852 51.2036 28.793 52.1958 C28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 Cf13.5195 70.3916 m12.9941 69.9209 12.7988 69.6587 V15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C7.8545 51.4497 8.873 49.9189 9.832 47.5039 C10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C15.041 64.7856 15.041 67.7046 13.5195 70.3916 Cf41.2324 64.4824 m41.5518 65.1113 41.7549 65.3682 V44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C51.2881 60.583 50.4268 61.8882 48.5645 62.333 C49.749 63.3862 50.584 65.4033 50.25 66.8691 C45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 Cf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Stripes)(Stripes) 8.45 4.6001 80.45 76.6001 [%AI3_Tile(0 O 0 R 1 0.07 1 0 k 1 0.07 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 3.6 w 4 M []0 d8.2 8.2 m80.7 8.2 LS8.2 22.6001 m80.7 22.6001 LS8.2 37.0002 m80.7 37.0002 LS8.2 51.4 m80.7 51.4 LS8.2 65.8001 m80.7 65.8001 LS8.2 15.4 m80.7 15.4 LS8.2 29.8001 m80.7 29.8001 LS8.2 44.2 m80.7 44.2 LS8.2 58.6001 m80.7 58.6001 LS8.2 73.0002 m80.7 73.0002 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%%EndSetup0 Au0 O0 g0 J 0 j 1 w 4 M []0 d306.27 485.4893 m310.6855 485.4893 314.3643 488.4355 317.3066 491.3779 C321.7227 491.3779 323.1953 497.2627 328.3438 495.793 C331.2861 501.6782 340.1172 496.5264 340.8535 503.8843 C342.3232 504.6206 343.0596 507.5635 346.002 506.8301 C351.8906 509.0361 344.5327 513.4517 349.6812 517.1309 C347.4756 521.5459 349.6812 527.4312 346.7388 530.3735 C343.7964 536.2617 337.9111 535.5254 332.7593 538.4678 C331.2861 542.147 328.3438 539.9414 326.1377 542.147 C323.9287 539.9414 326.1377 537.7314 324.665 535.5254 C327.6074 532.583 320.9858 530.3735 324.665 527.4312 C318.7803 515.6577 312.8916 505.3574 304.064 495.793 C301.8545 493.584 298.9121 493.584 297.4424 490.6416 C298.9121 486.9624 302.5908 486.2256 306.27 485.4893 Cf425.4668 361.877 m424.001 367.7617 417.376 369.2354 412.2236 371.4409 C403.3926 371.4409 393.0957 372.1777 384.998 372.1777 C376.1709 376.5928 365.1338 378.7988 359.249 387.6299 C359.249 389.8359 358.5122 388.3662 V359.9854 381.7451 362.9277 375.8564 365.1338 369.2354 C368.0762 366.2925 367.3433 361.1406 369.5488 358.1982 C363.6641 353.7822 355.5698 353.7822 347.4756 351.5767 C337.9111 350.1035 330.5537 350.1035 320.9858 349.3672 C315.1011 349.3672 305.5332 346.4248 300.3848 353.0459 C296.7061 357.4619 298.1758 364.8193 298.9121 369.9717 C296.7061 372.1777 300.3848 374.3867 298.9121 376.5928 C298.9121 377.3296 299.6484 378.0659 300.3848 378.0659 C301.8545 383.9512 304.064 389.103 305.5332 395.7246 C309.2124 400.873 309.9492 407.498 312.8916 414.1191 C315.8374 414.8555 313.6279 417.7983 312.1582 418.5347 C309.9492 429.5718 297.4424 426.626 292.2905 432.5142 C299.6484 436.1934 305.5332 442.8145 312.8916 445.0205 C317.3066 451.6455 328.3438 447.9668 331.2861 455.3242 C338.6445 454.5879 346.002 457.5303 351.1543 462.6826 C351.8906 467.0947 348.9482 470.7734 346.002 473.7197 C339.3809 474.4521 332.7593 479.6045 325.4014 478.1313 C317.3066 478.8682 312.8916 471.5098 306.27 468.5674 C304.064 467.8311 301.1216 467.0947 299.6484 464.8887 C294.4966 464.1519 289.3481 460.4727 284.9326 462.6826 C284.9326 464.8887 284.9326 467.0947 286.4058 468.5674 C286.4058 473.7197 284.9326 479.6045 287.1387 484.0195 C284.1963 490.6416 293.0273 495.0566 292.2905 502.415 C292.2905 507.5635 298.9121 512.7148 294.4966 517.1309 C289.3481 518.6001 285.6689 520.8096 281.2539 523.0156 C274.6323 522.2793 272.4229 528.9043 268.0107 531.1104 C266.5381 531.1104 265.0645 531.8467 263.5952 530.3735 C262.8589 528.9043 265.8013 528.1675 266.5381 527.4312 C268.7437 522.2793 269.4805 515.6577 267.2744 510.5093 C270.2168 495.793 266.5381 481.0771 267.2744 466.3613 C268.0107 464.8887 264.332 464.1519 266.5381 463.4155 C266.5381 459.0034 269.4805 453.8516 263.5952 450.9092 C257.707 448.6992 249.6162 450.1729 245.2002 446.4937 C240.0483 445.0205 234.1636 444.2876 229.748 442.0781 C226.0688 441.3418 224.5957 437.6626 220.1841 439.1357 C216.5049 439.1357 214.2954 436.1934 209.8799 436.9297 C204.7314 433.9834 198.8433 433.9834 193.6948 432.5142 C185.6001 429.5718 176.0361 431.041 170.1479 424.4199 C165.7324 425.8926 162.79 422.9468 159.8477 422.2139 C152.4893 424.4199 145.1313 429.5718 144.395 437.6626 C143.6582 430.3047 142.9258 422.2139 148.0742 415.5889 C150.2832 413.3828 153.2261 411.9097 156.1685 411.1768 C160.584 406.0249 167.9419 404.5518 173.8267 401.6094 C180.4482 400.873 187.8062 400.1396 192.958 405.2881 C196.6372 406.7612 202.522 405.2881 206.2012 408.2305 C213.5591 408.2305 217.9746 414.8555 223.8633 417.0615 C229.748 418.5347 234.8999 422.9468 240.0483 421.4775 C240.7852 418.5347 235.6328 417.0615 234.1636 414.1191 C234.8999 409.7041 230.4844 409.7041 229.0117 407.498 C214.2954 394.9878 203.2588 378.7988 187.8062 367.0293 C186.3369 362.6133 178.9785 360.4043 183.3945 355.2559 C182.6577 353.7822 181.1846 353.7822 180.4482 352.3135 C174.5635 353.0459 171.6211 346.4248 167.2051 344.9551 C161.3203 346.4248 161.3203 342.0088 157.6416 339.8032 C157.6416 335.3877 153.2261 333.1816 153.2261 328.7666 C155.4316 324.3545 158.3745 324.3545 162.79 325.0869 C170.1479 320.6753 178.2422 326.5605 184.127 330.9722 C188.543 329.499 186.3369 335.3877 190.752 334.6514 C196.6372 342.7456 206.2012 347.8975 212.0898 355.9922 C220.917 361.1406 223.8633 369.2354 232.6904 374.3867 C234.8999 375.8564 234.1636 379.5352 237.106 378.7988 C241.5215 386.1572 250.3486 389.8359 253.2949 397.1938 C257.707 400.873 262.1221 405.2881 266.5381 409.7041 C269.4805 413.3828 273.1592 419.2676 278.3115 417.7983 C281.2539 409.7041 276.1016 400.873 275.3687 392.7822 C276.8379 375.1201 261.3857 355.2559 278.3115 341.2764 C281.9902 333.1816 290.8174 333.1816 296.7061 328.7666 c306.27 321.4082 316.5703 328.7666 326.8745 325.8203 C331.2861 326.5605 336.4385 326.5605 340.1172 326.5605 C343.0596 328.0332 348.2119 326.5605 351.1543 328.0332 C357.7754 329.499 363.6641 328.0332 370.2856 330.2393 c372.4917 330.9722 375.4341 330.2393 376.9072 330.9722 C384.2651 333.918 393.8291 330.2393 401.187 334.6514 C409.2852 335.3877 415.9028 339.8032 422.5278 342.0088 C432.8247 344.9551 425.4668 355.2559 425.4668 361.877 Cf215.0322 464.1519 m217.2383 460.4727 221.6533 458.2671 226.0688 458.2671 C231.9541 461.2095 L234.8999 461.2095 236.3691 465.625 240.0483 464.8887 C240.0483 465.625 241.5215 467.0947 241.5215 467.8311 C240.7852 472.9829 239.312 477.3984 234.8999 481.0771 C230.4844 483.2832 226.0688 486.9624 224.5957 490.6416 C222.3901 492.8472 220.917 495.793 220.1841 497.999 C218.7109 499.4722 217.2383 497.2627 217.2383 496.5264 C219.4473 489.9048 213.5591 486.2256 213.5591 480.3408 C215.0322 474.4521 212.0898 469.3037 215.0322 464.1519 cfU%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI3 /terminate get execAdobe_pattern_AI3 /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_packedarray /terminate get exec%%EOF